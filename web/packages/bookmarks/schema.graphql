# This file was generated. Do not edit manually.

schema {
  query: QueryRoot
  mutation: MutationRoot
}

union DraftAuthorInfo = JjAuthor | QdAuthor

union DraftNovelInfo = JjNovel | QdNovel

type Author {
  avatar: String!
  createTime: DateTime!
  description: String!
  id: Int!
  name: String!
  novels: [Novel!]!
  updateTime: DateTime!
  url: String!
}

type Chapter {
  content: String
  createTime: DateTime!
  id: Int!
  novel: Novel!
  novelId: Int!
  title: String!
  updateTime: DateTime!
  url: String!
}

type Collection {
  "获取祖先列表"
  ancestors: [Collection!]!
  "获取子列表"
  children: [Collection!]!
  createTime: DateTime!
  description: String
  id: Int!
  name: String!
  parentId: Int
  path: String!
  updateTime: DateTime!
}

type JjAuthor {
  description: String!
  image: String!
  name: String!
  novels: [JjNovel!]!
  url: String!
}

type JjChapter {
  title: String!
  url: String!
}

type JjNovel {
  author: JjAuthor!
  chapters: [JjChapter!]!
  description: String!
  image: String!
  name: String!
  url: String!
}

type MutationRoot {
  "创建作者"
  createAuthor(avatar: String!, description: String!, name: String!, url: String!): Author!
  "创建目录"
  createCollection(description: String, name: String!, parentId: Int): Collection!
  "创建小说"
  createNovel(data: CreateNovelInput!): Novel!
  "创建标签"
  createTag(collectionId: Int, name: String!): Tag!
  "删除作者"
  deleteAuthor(id: Int!): Author!
  "删除目录"
  deleteCollection(id: Int!): Collection!
  "删除小说"
  deleteNovel(id: Int!): Novel!
  "删除标签"
  deleteTag(id: Int!): Tag!
}

type Novel {
  author: Author!
  avatar: String!
  "获取小说章节"
  chapters: [Chapter!]!
  collection: Collection
  createTime: DateTime!
  description: String!
  id: Int!
  name: String!
  status: ReadStatus!
  tags: [Tag!]!
  updateTime: DateTime!
}

type QdAuthor {
  description: String!
  image: String!
  name: String!
  novels: [QdNovel!]!
  url: String!
}

type QdChapter {
  title: String!
  url: String!
}

type QdNovel {
  author: QdAuthor!
  chapters: [QdChapter!]!
  description: String!
  image: String!
  name: String!
  url: String!
}

type QueryRoot {
  "后端 fetch 作者详情"
  fetchAuthor(id: String!, novelSite: NovelSite!): DraftAuthorInfo!
  "后端 fetch 小说详情"
  fetchNovel(id: String!, novelSite: NovelSite!): DraftNovelInfo!
  "获取作者详情"
  getAuthor(id: Int!): Author!
  "获取目录详情"
  getCollection(id: Int!): Collection!
  "获取目录列表"
  getCollections(parentId: Int): [Collection!]!
  "获取小说详情"
  getNovel(id: Int!): Novel!
  "获取作者列表"
  queryAuthors(searchName: String): [Author!]!
  "获取小说列表"
  queryNovels(collectionId: Int, readStatus: ReadStatus, tagMatch: TagMatch): [Novel!]!
  "获取标签列表"
  queryTags(collectionId: Int, deepSearch: Boolean): [Tag!]!
}

type Tag {
  collectionId: Int
  createTime: DateTime!
  id: Int!
  name: String!
  updateTime: DateTime!
}

enum NovelSite {
  JJWXC
  QIDIAN
}

enum ReadStatus {
  READ
  READING
  UNREAD
}

"""
A datetime with timezone offset.

The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
format, but it is always normalized to the UTC (Z) offset, e.g.
"2022-01-12T04:00:19.12345Z".
"""
scalar DateTime

input CreateNovelInput {
  authorId: Int!
  avatar: String!
  collectionId: Int
  description: String!
  name: String!
  tags: [Int!]!
  url: String!
}

input TagMatch {
  fullMatch: Boolean!
  matchSet: [Int!]!
}
