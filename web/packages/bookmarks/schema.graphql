schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Indicates that an Input Object is a OneOf Input Object (and thus requires exactly one of its field be provided)
directive @oneOf on INPUT_OBJECT

type Author {
  id: Int!
  name: String!
  avatar: String!
  site: NovelSite!
  siteId: String!
  description: String!
  createTime: DateTime!
  updateTime: DateTime!
  novels: [Novel!]!
  url: String!
}

type AuthorList {
  data: [Author!]!
  total: Int!
}

scalar BigDecimal

type Chapter {
  id: Int!
  title: String!
  site: NovelSite!
  siteId: String!
  content: String
  time: DateTime!
  wordCount: Int!
  novelId: Int!
  createTime: DateTime!
  updateTime: DateTime!
  siteNovelId: String!
  novel: Novel!
  url: String!
  author: Author!
}

type Collection {
  id: Int!
  name: String!
  path: String!
  parentId: Int
  description: String
  createTime: DateTime!
  updateTime: DateTime!

  # 获取祖先列表
  ancestors: [Collection!]!

  # 获取子列表
  children: [Collection!]!
}

type CollectionList {
  data: [Collection!]!
  total: Int!
}

input CreateNovelInput {
  name: String!
  avatar: String!
  description: String!
  authorId: Int!
  novelStatus: NovelStatus!
  site: NovelSite!
  siteId: String!
  tags: [Int!]!
}

# A datetime with timezone offset.
#
# The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
# or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
# format, but it is always normalized to the UTC (Z) offset, e.g.
# "2022-01-12T04:00:19.12345Z".
scalar DateTime

type DraftAuthorInfo {
  url: String!
  name: String!
  description: String!
  image: String!
  novels: [DraftNovelInfo!]!
  id: String!
  site: NovelSite!
}

type DraftChapterInfo {
  url: String!
  title: String!
  time: DateTime!
  wordCount: Int!
  novelId: String!
  id: String!
  site: NovelSite!
}

type DraftNovelInfo {
  url: String!
  name: String!
  description: String!
  image: String!
  chapters: [DraftChapterInfo!]!
  author: DraftAuthorInfo!
  status: NovelStatus!
  id: String!
  site: NovelSite!
  tags: [DraftTagInfo!]!
}

type DraftTagInfo {
  url: String!
  id: String!
  name: String!
}

type MutationRoot {
  # 创建目录
  createCollection(name: String!, parentId: Int, description: String): Collection!

  # 删除目录
  deleteCollection(id: Int!): Int!

  # 更新目录
  updateCollection(id: Int!, name: String!, parentId: Int, description: String): Collection!

  # 创建作者
  createAuthor(name: String!, avatar: String!, description: String!, site: NovelSite!, siteId: String!): Author!

  # 删除作者
  deleteAuthor(id: Int!): Author!

  # 创建标签
  createTag(name: String!, site: NovelSite!, siteId: String!): Tag!

  # 删除标签
  deleteTag(id: Int!): Tag!

  # 创建小说
  createNovel(data: CreateNovelInput!): Novel!

  # 删除小说
  deleteNovel(id: Int!): Novel!

  # 保存 draft author
  saveDraftAuthor(author: SaveDraftAuthor!): Author!

  # 通过 fetch 更新小说
  updateNovelByCrawler(novelId: Int!): Novel!

  # 通过 fetch 更新作者
  updateAuthorByCrawler(authorId: Int!): Author!

  # 给小说添加集合
  addCollectionForNovel(collectionId: Int!, novelId: Int!): Novel!

  # 给小说删除集合
  deleteCollectionForNovel(collectionId: Int!, novelId: Int!): Novel!
}

type Novel {
  id: Int!
  name: String!
  avatar: String!
  description: String!
  novelStatus: NovelStatus!
  site: NovelSite!
  siteId: String!
  createTime: DateTime!
  updateTime: DateTime!
  author: Author!
  tags: [Tag!]!

  # 获取小说章节
  chapters: [Chapter!]!
  url: String!
  wordCount: BigDecimal!

  # 最新章节
  lastChapter: Chapter

  # 最老章节
  firstChapter: Chapter

  # 集合列表
  collections: [Collection!]!
}

type NovelList {
  data: [Novel!]!
  total: Int!
}

enum NovelSite {
  QIDIAN
  JJWXC
}

enum NovelStatus {
  ONGOING
  COMPLETED
  PAUSED
}

input Pagination {
  page: Int! = 1
  pageSize: Int! = 10
}

type QueryRoot {
  # 获取所有集合
  allCollections: [Collection!]!

  # 获取目录列表
  getCollections(parentId: Int, pagination: Pagination!): CollectionList!

  # 获取目录详情
  getCollection(id: Int!): Collection!

  # 获取作者列表
  queryAuthors(searchName: String, pagination: Pagination!): AuthorList!

  # 获取作者详情
  getAuthor(id: Int!): Author!

  # 获取所有作者
  allAuthors(searchName: String): [Author!]!

  # 获取标签列表
  queryTags(pagination: Pagination!): TagList!

  # 获取所有 tag
  allTags: [Tag!]!

  # 获取小说列表
  queryNovels(
    collectionMatch: TagMatch
    tagMatch: TagMatch
    novelStatus: NovelStatus
    pagination: Pagination!
  ): NovelList!

  # 获取小说详情
  getNovel(id: Int!): Novel!

  # 后端 fetch 作者详情
  fetchAuthor(id: String!, novelSite: NovelSite!): DraftAuthorInfo!

  # 后端 fetch 小说详情
  fetchNovel(id: String!, novelSite: NovelSite!): DraftNovelInfo!
}

input SaveChapterInfo {
  id: String!
  name: String!
  time: DateTime!
  wordCount: Int!
}

input SaveDraftAuthor {
  id: String!
  site: NovelSite!
  name: String!
  description: String!
  image: String!
  novels: [SaveNovelInfo!]!
}

input SaveNovelInfo {
  id: String!
  site: NovelSite!
  name: String!
  description: String!
  image: String!
  chapters: [SaveChapterInfo!]!
  tags: [SaveTagInfo!]!
  novelStatus: NovelStatus!
}

input SaveTagInfo {
  id: String!
  name: String!
}

type Tag {
  id: Int!
  name: String!
  site: NovelSite!
  siteId: String!
  createTime: DateTime!
  updateTime: DateTime!
  url: String!
}

type TagList {
  data: [Tag!]!
  total: Int!
}

input TagMatch {
  matchSet: [Int!]!
  fullMatch: Boolean!
}
