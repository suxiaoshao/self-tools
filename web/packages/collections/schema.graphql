schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Indicates that an Input Object is a OneOf Input Object (and thus requires exactly one of its field be provided)
directive @oneOf on INPUT_OBJECT

type Collection {
  id: Int!
  name: String!
  path: String!
  parentId: Int
  description: String
  createTime: DateTime!
  updateTime: DateTime!

  # 获取祖先列表
  ancestors: [Collection!]!
}

input CollectionItemQuery {
  id: Int
  createTime: TimeRange
  updateTime: TimeRange
  pagination: Pagination!
}

# A datetime with timezone offset.
#
# The input is a string in RFC3339 format, e.g. "2022-01-12T04:00:19.12345Z"
# or "2022-01-12T04:00:19+03:00". The output is also a string in RFC3339
# format, but it is always normalized to the UTC (Z) offset, e.g.
# "2022-01-12T04:00:19.12345Z".
scalar DateTime

type Item {
  id: Int!
  name: String!
  content: String!
  createTime: DateTime!
  updateTime: DateTime!
  collections: [Collection!]!
}

union ItemAndCollection = Item | Collection

type ItemAndCollectionList {
  data: [ItemAndCollection!]!
  total: Int!
}

type ItemList {
  data: [Item!]!
  total: Int!
}

type MutationRoot {
  # 创建目录
  createCollection(name: String!, parentId: Int, description: String): Collection!

  # 删除目录
  deleteCollection(id: Int!): Collection!

  # 修改目录
  updateCollection(id: Int!, name: String!, description: String): Collection!

  # 创建记录
  createItem(name: String!, content: String!, collectionIds: [Int!]!): Item!

  # 删除记录
  deleteItem(id: Int!): Item!

  # 修改记录
  updateItem(id: Int!, name: String!, content: String!): Item!

  # 给条目添加集合
  addCollectionForItem(collectionId: Int!, itemId: Int!): Item!

  # 给条目删除集合
  deleteCollectionForItem(collectionId: Int!, itemId: Int!): Item!
}

input Pagination {
  page: Int! = 1
  pageSize: Int! = 10
}

type QueryRoot {
  # 获取所有集合
  allCollections: [Collection!]!

  # 获取目录详情
  getCollection(id: Int!): Collection!

  # 获取记录详情
  getItem(id: Int!): Item!

  # 获取集合下的集合和记录
  collectionAndItem(query: CollectionItemQuery!): ItemAndCollectionList!

  # 获取条目列表
  queryItems(collectionMatch: TagMatch, pagination: Pagination!): ItemList!
}

input TagMatch {
  matchSet: [Int!]!
  fullMatch: Boolean!
}

input TimeRange {
  start: DateTime!
  end: DateTime!
}
